// Code generated by github.com/alextanhongpin/builder, DO NOT EDIT.

package main

import "fmt"

type AuthorBuilder struct {
	author    Author
	fields    []string
	fieldsSet uint64
}

func NewAuthorBuilder(additionalFields ...string) *AuthorBuilder {
	for _, field := range additionalFields {
		if field == "" {
			panic("builder: empty string in constructor")
		}
	}
	exists := make(map[string]bool)
	fields := append([]string{"user", "books", "releases"}, additionalFields...)
	for _, field := range fields {
		if exists[field] {
			panic(fmt.Errorf("builder: duplicate field %q", field))
		}
		exists[field] = true
	}
	return &AuthorBuilder{fields: fields}
}

// WithUser sets user.
func (b AuthorBuilder) WithUser(user User, valid bool) AuthorBuilder {
	b.mustSet("user")
	if valid {
		b.author.user = &user
	}
	return b
}

// WithBooks sets books.
func (b AuthorBuilder) WithBooks(books []Book) AuthorBuilder {
	b.mustSet("books")
	b.author.books = books
	return b
}

// WithReleases sets releases.
func (b AuthorBuilder) WithReleases(releases []*Year) AuthorBuilder {
	b.mustSet("releases")
	b.author.releases = releases
	return b
}

// Build returns Author.
func (b AuthorBuilder) Build() Author {
	for i, field := range b.fields {
		if !b.isSet(i) {
			panic(fmt.Errorf("builder: %q not set", field))
		}
	}
	return b.author
}

// Build returns Author.
func (b AuthorBuilder) BuildPartial() Author {
	return b.author
}

func (b *AuthorBuilder) mustSet(field string) {
	i := b.indexOf(field)
	if b.isSet(i) {
		panic(fmt.Errorf("builder: set %q twice", field))
	}
	b.fieldsSet |= 1 << i
}

func (b AuthorBuilder) isSet(pos int) bool {
	return (b.fieldsSet & (1 << pos)) == (1 << pos)
}

func (b AuthorBuilder) indexOf(field string) int {
	for i, f := range b.fields {
		if f == field {
			return i
		}
	}
	panic(fmt.Errorf("builder: field: %q not found", field))
}
