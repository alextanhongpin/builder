// Code generated by github.com/alextanhongpin/builder, DO NOT EDIT.
package main

import (
	"database/sql"
	"encoding/json"
	"fmt"
	uuid "github.com/google/uuid"
)

type BookBuilder struct {
	book      Book
	fields    []string
	fieldsSet uint64
}

func NewBookBuilder(additionalFields ...string) *BookBuilder {
	for _, field := range additionalFields {
		if field == "" {
			panic("builder: empty string in constructor")
		}
	}
	exists := make(map[string]bool)
	fields := append([]string{"id", "name", "extra"}, additionalFields...)
	for _, field := range fields {
		if exists[field] {
			panic(fmt.Errorf("builder: duplicate field %q", field))
		}
		exists[field] = true
	}
	return &BookBuilder{fields: fields}
}

// WithID sets id.
func (b BookBuilder) WithID(id uuid.UUID) BookBuilder {
	b.mustSet("id")
	b.book.id = id
	return b
}

// WithName sets name.
func (b BookBuilder) WithName(name sql.NullString) BookBuilder {
	b.mustSet("name")
	b.book.name = name
	return b
}

// WithExtra sets extra.
func (b BookBuilder) WithExtra(extra json.RawMessage) BookBuilder {
	b.mustSet("extra")
	b.book.extra = extra
	return b
}

// Build returns Book.
func (b BookBuilder) Build() Book {
	for i, field := range b.fields {
		if !b.isSet(i) {
			panic(fmt.Errorf("builder: %q not set", field))
		}
	}
	return b.book
}

// Build returns Book.
func (b BookBuilder) BuildPartial() Book {
	return b.book
}

func (b *BookBuilder) mustSet(field string) {
	i := b.indexOf(field)
	if b.isSet(i) {
		panic(fmt.Errorf("builder: set %q twice", field))
	}
	b.fieldsSet |= 1 << i
}

func (b BookBuilder) isSet(pos int) bool {
	return (b.fieldsSet & (1 << pos)) == (1 << pos)
}

func (b BookBuilder) indexOf(field string) int {
	for i, f := range b.fields {
		if f == field {
			return i
		}
	}
	panic(fmt.Errorf("builder: field: %q not found", field))
}
