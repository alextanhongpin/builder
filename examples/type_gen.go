// Code generated by github.com/alextanhongpin/builder, DO NOT EDIT.

package main

import (
	"database/sql"
	"encoding/json"
	"fmt"
	uuid "github.com/google/uuid"
)

type BookBuilder struct {
	book      Book
	fields    map[string]int
	fieldsSet uint64
}

func NewBookBuilder() *BookBuilder {
	fields := make(map[string]int)
	for i, field := range []string{"id", "name", "extra"} {
		fields[field] = i
	}
	return &BookBuilder{fields: fields}
}

// WithID sets id.
func (b BookBuilder) WithID(id uuid.UUID) BookBuilder {
	b.book.id = id
	b.Set("id")
	return b
}

// WithName sets name.
func (b BookBuilder) WithName(name sql.NullString) BookBuilder {
	b.book.name = name
	b.Set("name")
	return b
}

// WithExtra sets extra.
func (b BookBuilder) WithExtra(extra json.RawMessage) BookBuilder {
	b.book.extra = extra
	b.Set("extra")
	return b
}

// Build returns Book.
func (b BookBuilder) Build() Book {
	for field := range b.fields {
		if !b.IsSet(field) {
			panic(fmt.Errorf("builder: %q not set", field))
		}
	}
	return b.book
}

// Build returns Book.
func (b BookBuilder) BuildPartial() Book {
	return b.book
}

func (b *BookBuilder) Set(field string) bool {
	n, ok := b.fields[field]
	if !ok {
		return false
	}
	b.fieldsSet |= 1 << n
	return true

}

func (b BookBuilder) IsSet(field string) bool {
	pos := b.fields[field]
	return (b.fieldsSet & (1 << pos)) == (1 << pos)
}

func (b *BookBuilder) Register(field string) error {
	if _, ok := b.fields[field]; ok {
		return fmt.Errorf("field %q already registered", field)
	}
	b.fields[field] = len(b.fields)
	return nil
}
