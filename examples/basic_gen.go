// Code generated by github.com/alextanhongpin/builder, DO NOT EDIT.

package main

import "fmt"

type UserBuilder struct {
	user      User
	fields    map[string]int
	fieldsSet uint64
}

func NewUserBuilder() *UserBuilder {
	fields := make(map[string]int)
	for i, field := range []string{"name", "age", "married", "hobbies"} {
		fields[field] = i
	}
	return &UserBuilder{fields: fields}
}

// WithName sets name.
func (b UserBuilder) WithName(name string) UserBuilder {
	b.user.name = name
	b.Set("name")
	return b
}

// WithAge sets age.
func (b UserBuilder) WithAge(age int64) UserBuilder {
	b.user.age = age
	b.Set("age")
	return b
}

// WithMarried sets married.
func (b UserBuilder) WithMarried(married bool) UserBuilder {
	b.user.married = married
	b.Set("married")
	return b
}

// WithHobbies sets hobbies.
func (b UserBuilder) WithHobbies(hobbies []string) UserBuilder {
	b.user.hobbies = hobbies
	b.Set("hobbies")
	return b
}

// Build returns User.
func (b UserBuilder) Build() User {
	for field := range b.fields {
		if !b.IsSet(field) {
			panic(fmt.Errorf("builder: %q not set", field))
		}
	}
	return b.user
}

// Build returns User.
func (b UserBuilder) BuildPartial() User {
	return b.user
}

func (b *UserBuilder) Set(field string) bool {
	n, ok := b.fields[field]
	if !ok {
		return false
	}
	b.fieldsSet |= 1 << n
	return true

}

func (b UserBuilder) IsSet(field string) bool {
	pos := b.fields[field]
	return (b.fieldsSet & (1 << pos)) == (1 << pos)
}

func (b *UserBuilder) Register(field string) error {
	if _, ok := b.fields[field]; ok {
		return fmt.Errorf("field %q already registered", field)
	}
	b.fields[field] = len(b.fields)
	return nil
}
