// Code generated by github.com/alextanhongpin/builder, DO NOT EDIT.

package main

import (
	"fmt"
	uuid "github.com/google/uuid"
)

type HelloBuilder struct {
	hello     Hello
	fields    map[string]int
	fieldsSet uint64
}

func NewHelloBuilder() *HelloBuilder {
	fields := make(map[string]int)
	for i, field := range []string{"id"} {
		fields[field] = i
	}
	return &HelloBuilder{fields: fields}
}

// WithID sets id.
func (b HelloBuilder) WithID(id uuid.UUID) HelloBuilder {
	b.hello.id = id
	b.Set("id")
	return b
}

// Build returns Hello.
func (b HelloBuilder) Build() Hello {
	for field := range b.fields {
		if !b.IsSet(field) {
			panic(fmt.Errorf("builder: %q not set", field))
		}
	}
	return b.hello
}

// Build returns Hello.
func (b HelloBuilder) BuildPartial() Hello {
	return b.hello
}

func (b *HelloBuilder) Set(field string) bool {
	n, ok := b.fields[field]
	if !ok {
		return false
	}
	b.fieldsSet |= 1 << n
	return true

}

func (b HelloBuilder) IsSet(field string) bool {
	pos := b.fields[field]
	return (b.fieldsSet & (1 << pos)) == (1 << pos)
}

func (b *HelloBuilder) Register(field string) error {
	if _, ok := b.fields[field]; ok {
		return fmt.Errorf("field %q already registered", field)
	}
	b.fields[field] = len(b.fields)
	return nil
}

type WorldBuilder struct {
	world     World
	fields    map[string]int
	fieldsSet uint64
}

func NewWorldBuilder() *WorldBuilder {
	fields := make(map[string]int)
	for i, field := range []string{"id"} {
		fields[field] = i
	}
	return &WorldBuilder{fields: fields}
}

// WithID sets id.
func (b WorldBuilder) WithID(id uuid.UUID) WorldBuilder {
	b.world.id = id
	b.Set("id")
	return b
}

// Build returns World.
func (b WorldBuilder) Build() World {
	for field := range b.fields {
		if !b.IsSet(field) {
			panic(fmt.Errorf("builder: %q not set", field))
		}
	}
	return b.world
}

// Build returns World.
func (b WorldBuilder) BuildPartial() World {
	return b.world
}

func (b *WorldBuilder) Set(field string) bool {
	n, ok := b.fields[field]
	if !ok {
		return false
	}
	b.fieldsSet |= 1 << n
	return true

}

func (b WorldBuilder) IsSet(field string) bool {
	pos := b.fields[field]
	return (b.fieldsSet & (1 << pos)) == (1 << pos)
}

func (b *WorldBuilder) Register(field string) error {
	if _, ok := b.fields[field]; ok {
		return fmt.Errorf("field %q already registered", field)
	}
	b.fields[field] = len(b.fields)
	return nil
}
