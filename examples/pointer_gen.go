// Code generated by github.com/alextanhongpin/builder, DO NOT EDIT.

package main

import (
	"fmt"
	"time"
)

type ConfirmationTokenBuilder struct {
	confirmationToken ConfirmationToken
	fields            map[string]int
	fieldsSet         uint64
}

func NewConfirmationTokenBuilder() *ConfirmationTokenBuilder {
	fields := make(map[string]int)
	for i, field := range []string{"expiresAt", "valid", "reference"} {
		fields[field] = i
	}
	return &ConfirmationTokenBuilder{fields: fields}
}

// WithExpiresAt sets expiresAt.
func (b ConfirmationTokenBuilder) WithExpiresAt(expiresAt time.Time, valid bool) ConfirmationTokenBuilder {
	if valid {
		b.confirmationToken.expiresAt = &expiresAt
	}
	b.Set("expiresAt")
	return b
}

// WithValid sets valid.
func (b ConfirmationTokenBuilder) WithValid(valid bool, valid1 bool) ConfirmationTokenBuilder {
	if valid1 {
		b.confirmationToken.valid = &valid
	}
	b.Set("valid")
	return b
}

// WithReference sets reference.
func (b ConfirmationTokenBuilder) WithReference(reference string, valid bool) ConfirmationTokenBuilder {
	if valid {
		b.confirmationToken.reference = &reference
	}
	b.Set("reference")
	return b
}

// Build returns ConfirmationToken.
func (b ConfirmationTokenBuilder) Build() ConfirmationToken {
	for field := range b.fields {
		if !b.IsSet(field) {
			panic(fmt.Errorf("builder: %q not set", field))
		}
	}
	return b.confirmationToken
}

// Build returns ConfirmationToken.
func (b ConfirmationTokenBuilder) BuildPartial() ConfirmationToken {
	return b.confirmationToken
}

func (b *ConfirmationTokenBuilder) Set(field string) bool {
	n, ok := b.fields[field]
	if !ok {
		return false
	}
	b.fieldsSet |= 1 << n
	return true

}

func (b ConfirmationTokenBuilder) IsSet(field string) bool {
	pos := b.fields[field]
	return (b.fieldsSet & (1 << pos)) == (1 << pos)
}

func (b *ConfirmationTokenBuilder) Register(field string) error {
	if _, ok := b.fields[field]; ok {
		return fmt.Errorf("field %q already registered", field)
	}
	b.fields[field] = len(b.fields)
	return nil
}
