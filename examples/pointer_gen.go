// Code generated by github.com/alextanhongpin/builder, DO NOT EDIT.
package main

import (
	"fmt"
	"time"
)

type ConfirmationTokenBuilder struct {
	confirmationToken ConfirmationToken
	fields            []string
	fieldsSet         uint64
}

func NewConfirmationTokenBuilder(additionalFields ...string) *ConfirmationTokenBuilder {
	for _, field := range additionalFields {
		if field == "" {
			panic("builder: empty string in constructor")
		}
	}
	exists := make(map[string]bool)
	fields := append([]string{"expiresAt", "valid", "reference"}, additionalFields...)
	for _, field := range fields {
		if exists[field] {
			panic(fmt.Errorf("builder: duplicate field %q", field))
		}
		exists[field] = true
	}
	return &ConfirmationTokenBuilder{fields: fields}
}

// WithExpiresAt sets expiresAt.
func (b ConfirmationTokenBuilder) WithExpiresAt(expiresAt time.Time, valid bool) ConfirmationTokenBuilder {
	b.mustSet("expiresAt")
	if valid {
		b.confirmationToken.expiresAt = &expiresAt
	}
	return b
}

// WithValid sets valid.
func (b ConfirmationTokenBuilder) WithValid(valid bool, valid1 bool) ConfirmationTokenBuilder {
	b.mustSet("valid")
	if valid1 {
		b.confirmationToken.valid = &valid
	}
	return b
}

// WithReference sets reference.
func (b ConfirmationTokenBuilder) WithReference(reference string, valid bool) ConfirmationTokenBuilder {
	b.mustSet("reference")
	if valid {
		b.confirmationToken.reference = &reference
	}
	return b
}

// Build returns ConfirmationToken.
func (b ConfirmationTokenBuilder) Build() ConfirmationToken {
	for i, field := range b.fields {
		if !b.isSet(i) {
			panic(fmt.Errorf("builder: %q not set", field))
		}
	}
	return b.confirmationToken
}

// Build returns ConfirmationToken.
func (b ConfirmationTokenBuilder) BuildPartial() ConfirmationToken {
	return b.confirmationToken
}

func (b *ConfirmationTokenBuilder) mustSet(field string) {
	i := b.indexOf(field)
	if b.isSet(i) {
		panic(fmt.Errorf("builder: set %q twice", field))
	}
	b.fieldsSet |= 1 << i
}

func (b ConfirmationTokenBuilder) isSet(pos int) bool {
	return (b.fieldsSet & (1 << pos)) == (1 << pos)
}

func (b ConfirmationTokenBuilder) indexOf(field string) int {
	for i, f := range b.fields {
		if f == field {
			return i
		}
	}
	panic(fmt.Errorf("builder: field: %q not found", field))
}
