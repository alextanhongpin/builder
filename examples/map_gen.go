// Code generated by github.com/alextanhongpin/builder, DO NOT EDIT.
package main

import (
	"fmt"
	uuid "github.com/google/uuid"
)

type CacheBuilder struct {
	cache     Cache
	fields    []string
	fieldsSet uint64
}

func NewCacheBuilder(additionalFields ...string) *CacheBuilder {
	for _, field := range additionalFields {
		if field == "" {
			panic("builder: empty string in constructor")
		}
	}
	exists := make(map[string]bool)
	fields := append([]string{"userByID", "booksByAuthorID", "userByIDByName"}, additionalFields...)
	for _, field := range fields {
		if exists[field] {
			panic(fmt.Errorf("builder: duplicate field %q", field))
		}
		exists[field] = true
	}
	return &CacheBuilder{fields: fields}
}

// WithUserByID sets userByID.
func (b CacheBuilder) WithUserByID(userByID map[uuid.UUID]*User) CacheBuilder {
	b.mustSet("userByID")
	b.cache.userByID = userByID
	return b
}

// WithBooksByAuthorID sets booksByAuthorID.
func (b CacheBuilder) WithBooksByAuthorID(booksByAuthorID map[int64][]Book) CacheBuilder {
	b.mustSet("booksByAuthorID")
	b.cache.booksByAuthorID = booksByAuthorID
	return b
}

// WithUserByIDByName sets userByIDByName.
func (b CacheBuilder) WithUserByIDByName(userByIDByName map[string]map[int64]User) CacheBuilder {
	b.mustSet("userByIDByName")
	b.cache.userByIDByName = userByIDByName
	return b
}

// Build returns Cache.
func (b CacheBuilder) Build() Cache {
	for i, field := range b.fields {
		if !b.isSet(i) {
			panic(fmt.Errorf("builder: %q not set", field))
		}
	}
	return b.cache
}

// Build returns Cache.
func (b CacheBuilder) BuildPartial() Cache {
	return b.cache
}

func (b *CacheBuilder) mustSet(field string) {
	i := b.indexOf(field)
	if b.isSet(i) {
		panic(fmt.Errorf("builder: set %q twice", field))
	}
	b.fieldsSet |= 1 << i
}

func (b CacheBuilder) isSet(pos int) bool {
	return (b.fieldsSet & (1 << pos)) == (1 << pos)
}

func (b CacheBuilder) indexOf(field string) int {
	for i, f := range b.fields {
		if f == field {
			return i
		}
	}
	panic(fmt.Errorf("builder: field: %q not found", field))
}
