// Code generated by github.com/alextanhongpin/builder, DO NOT EDIT.

package main

import (
	"fmt"
	uuid "github.com/google/uuid"
)

type CacheBuilder struct {
	cache     Cache
	fields    map[string]int
	fieldsSet uint64
}

func NewCacheBuilder() *CacheBuilder {
	fields := make(map[string]int)
	for i, field := range []string{"userByID", "booksByAuthorID", "userByIDByName"} {
		fields[field] = i
	}
	return &CacheBuilder{fields: fields}
}

// WithUserByID sets userByID.
func (b CacheBuilder) WithUserByID(userByID map[uuid.UUID]*User) CacheBuilder {
	b.cache.userByID = userByID
	b.Set("userByID")
	return b
}

// WithBooksByAuthorID sets booksByAuthorID.
func (b CacheBuilder) WithBooksByAuthorID(booksByAuthorID map[int64][]Book) CacheBuilder {
	b.cache.booksByAuthorID = booksByAuthorID
	b.Set("booksByAuthorID")
	return b
}

// WithUserByIDByName sets userByIDByName.
func (b CacheBuilder) WithUserByIDByName(userByIDByName map[string]map[int64]User) CacheBuilder {
	b.cache.userByIDByName = userByIDByName
	b.Set("userByIDByName")
	return b
}

// Build returns Cache.
func (b CacheBuilder) Build() Cache {
	for field := range b.fields {
		if !b.IsSet(field) {
			panic(fmt.Errorf("builder: %q not set", field))
		}
	}
	return b.cache
}

// Build returns Cache.
func (b CacheBuilder) BuildPartial() Cache {
	return b.cache
}

func (b *CacheBuilder) Set(field string) bool {
	n, ok := b.fields[field]
	if !ok {
		return false
	}
	b.fieldsSet |= 1 << n
	return true

}

func (b CacheBuilder) IsSet(field string) bool {
	pos := b.fields[field]
	return (b.fieldsSet & (1 << pos)) == (1 << pos)
}

func (b *CacheBuilder) Register(field string) error {
	if _, ok := b.fields[field]; ok {
		return fmt.Errorf("field %q already registered", field)
	}
	b.fields[field] = len(b.fields)
	return nil
}
