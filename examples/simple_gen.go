// Code generated by builder, DO NOT EDIT.
package main

import "fmt"

type SimpleBuilder struct {
	simple    Simple
	fields    []string
	fieldsSet uint64
}

func NewSimpleBuilder(additionalFields ...string) *SimpleBuilder {
	for _, field := range additionalFields {
		if field == "" {
			panic("builder: empty string in constructor")
		}
	}
	exists := make(map[string]bool)
	fields := append([]string{"name"}, additionalFields...)
	for _, field := range fields {
		if exists[field] {
			panic(fmt.Sprintf("builder: duplicate field %q", field))
		}
		exists[field] = true
	}
	return &SimpleBuilder{fields: fields}
}

// WithName sets name.
func (b SimpleBuilder) WithName(name string) SimpleBuilder {
	b.mustSet("name")
	b.simple.name = name
	return b
}

// Build returns Simple.
func (b SimpleBuilder) Build() Simple {
	for i, field := range b.fields {
		if !b.isSet(i) {
			panic(fmt.Sprintf("builder: %q not set", field))
		}
	}
	return b.simple
}

// Build returns Simple.
func (b SimpleBuilder) BuildPartial() Simple {
	return b.simple
}

func (b *SimpleBuilder) mustSet(field string) {
	i := b.indexOf(field)
	if b.isSet(i) {
		panic(fmt.Sprintf("builder: set %q twice", field))
	}
	b.fieldsSet |= 1 << i
}

func (b SimpleBuilder) isSet(pos int) bool {
	return (b.fieldsSet & (1 << pos)) == (1 << pos)
}

func (b SimpleBuilder) indexOf(field string) int {
	for i, f := range b.fields {
		if f == field {
			return i
		}
	}
	panic(fmt.Sprintf("builder: field: %q not found", field))
}
