// Code generated by builder, DO NOT EDIT.
package main

import (
	"database/sql"
	"fmt"
)

type FooBuilder struct {
	foo       Foo
	fields    []string
	fieldsSet uint64
}

func NewFooBuilder(additionalFields ...string) *FooBuilder {
	for _, field := range additionalFields {
		if field == "" {
			panic("builder: empty string in constructor")
		}
	}
	exists := make(map[string]bool)
	fields := append([]string{"id", "name", "age", "valid", "url", "realAge", "bar", "bars", "barPtrs", "barByString", "stringByBar", "sliceBarByString", "sliceBarPtrByString", "barPtrByString", "stringByBarPtr"}, additionalFields...)
	for _, field := range fields {
		if exists[field] {
			panic(fmt.Sprintf("builder: duplicate field %q", field))
		}
		exists[field] = true
	}
	return &FooBuilder{fields: fields}
}

// WithID sets id.
func (b FooBuilder) WithID(id int64) FooBuilder {
	b.mustSet("id")
	b.foo.id = id
	return b
}

// WithName sets name.
func (b FooBuilder) WithName(name string) FooBuilder {
	b.mustSet("name")
	b.foo.name = name
	return b
}

// WithAge sets age.
func (b FooBuilder) WithAge(age sql.NullInt64) FooBuilder {
	b.mustSet("age")
	b.foo.age = age
	return b
}

// WithValid sets valid.
func (b FooBuilder) WithValid(valid bool, valid1 bool) FooBuilder {
	b.mustSet("valid")
	if valid1 {
		b.foo.valid = &valid
	}
	return b
}

// WithURL sets url.
func (b FooBuilder) WithURL(url string) FooBuilder {
	b.mustSet("url")
	b.foo.url = url
	return b
}

// WithRealAge sets realAge.
func (b FooBuilder) WithRealAge(realAge int64, valid bool) FooBuilder {
	b.mustSet("realAge")
	if valid {
		b.foo.realAge = &realAge
	}
	return b
}

// WithBar sets bar.
func (b FooBuilder) WithBar(bar Bar) FooBuilder {
	b.mustSet("bar")
	b.foo.bar = bar
	return b
}

// WithBars sets bars.
func (b FooBuilder) WithBars(bars []Bar) FooBuilder {
	b.mustSet("bars")
	b.foo.bars = bars
	return b
}

// WithBarPtrs sets barPtrs.
func (b FooBuilder) WithBarPtrs(barPtrs []*Bar, valid bool) FooBuilder {
	b.mustSet("barPtrs")
	if valid {
		b.foo.barPtrs = barPtrs
	}
	return b
}

// WithBarByString sets barByString.
func (b FooBuilder) WithBarByString(barByString map[string]Bar) FooBuilder {
	b.mustSet("barByString")
	b.foo.barByString = barByString
	return b
}

// WithStringByBar sets stringByBar.
func (b FooBuilder) WithStringByBar(stringByBar map[Bar]string) FooBuilder {
	b.mustSet("stringByBar")
	b.foo.stringByBar = stringByBar
	return b
}

// WithSliceBarByString sets sliceBarByString.
func (b FooBuilder) WithSliceBarByString(sliceBarByString map[string][]Bar) FooBuilder {
	b.mustSet("sliceBarByString")
	b.foo.sliceBarByString = sliceBarByString
	return b
}

// WithSliceBarPtrByString sets sliceBarPtrByString.
func (b FooBuilder) WithSliceBarPtrByString(sliceBarPtrByString map[string][]*Bar) FooBuilder {
	b.mustSet("sliceBarPtrByString")
	b.foo.sliceBarPtrByString = sliceBarPtrByString
	return b
}

// WithBarPtrByString sets barPtrByString.
func (b FooBuilder) WithBarPtrByString(barPtrByString map[string]*Bar) FooBuilder {
	b.mustSet("barPtrByString")
	b.foo.barPtrByString = barPtrByString
	return b
}

// WithStringByBarPtr sets stringByBarPtr.
func (b FooBuilder) WithStringByBarPtr(stringByBarPtr map[*Bar]string) FooBuilder {
	b.mustSet("stringByBarPtr")
	b.foo.stringByBarPtr = stringByBarPtr
	return b
}

// Build returns Foo.
func (b FooBuilder) Build() Foo {
	for i, field := range b.fields {
		if !b.isSet(i) {
			panic(fmt.Sprintf("builder: %q not set", field))
		}
	}
	return b.foo
}

// Build returns Foo.
func (b FooBuilder) BuildPartial() Foo {
	return b.foo
}

func (b *FooBuilder) mustSet(field string) {
	i := b.indexOf(field)
	if b.isSet(i) {
		panic(fmt.Sprintf("builder: set %q twice", field))
	}
	b.fieldsSet |= 1 << i
}

func (b FooBuilder) isSet(pos int) bool {
	return (b.fieldsSet & (1 << pos)) == (1 << pos)
}

func (b FooBuilder) indexOf(field string) int {
	for i, f := range b.fields {
		if f == field {
			return i
		}
	}
	panic(fmt.Sprintf("builder: field: %q not found", field))
}
