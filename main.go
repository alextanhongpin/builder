package main

import (
	"fmt"
	"regexp"

	"github.com/alextanhongpin/pkg/gen"
	"github.com/dave/jennifer/jen"
	. "github.com/dave/jennifer/jen"
)

var (
	tagRe *regexp.Regexp
)

func init() {
	tagRe = regexp.MustCompile(`build:"-"`)
}

func skipBuild(tag string) bool {
	return tagRe.MatchString(tag)
}

// Generator is the name of this tool.
const Generator = "builder"

func main() {
	gen.New(generateStructFromFields)
}

func genBuilderName(structName string) string {
	builderName := fmt.Sprintf("%sBuilder", structName)
	return builderName
}

func generateStructFromFields(opt gen.Option) error {
	var (
		pkgName    = opt.PkgName
		pkgPath    = opt.PkgPath
		structName = opt.StructName
		fields     = opt.Fields
		out        = opt.Out
	)

	f := NewFile(pkgName) // e.g. main
	f.PackageComment(fmt.Sprintf("Code generated by %s, DO NOT EDIT.", Generator))

	generateBuilder(f, structName)
	generateBuilderConstructor(f, structName)

	for _, field := range fields {
		if skipBuild(field.Tag) {
			continue
		}
		if field.IsPointer {
			generateWitherPointer(f, pkgPath, structName, field)
		} else {
			generateWither(f, pkgPath, structName, field)
		}
	}

	generateBuildFunc(f, structName)

	return f.Save(out) // e.g. main_gen.go
}

func generateBuilder(f *jen.File, structName string) {
	// Output:
	//type FooBuilder struct {
	//  foo Foo
	//}

	f.Type().Id(genBuilderName(structName)).Struct(
		Id(gen.LowerFirst(structName)).Id(structName),
	).Line()
}

func generateBuilderConstructor(f *jen.File, structName string) {
	// Output:
	//func NewFooBuilder() *FooBuilder {
	//  return &FooBuilder{}
	//}

	builderName := genBuilderName(structName)
	f.Func().Id(fmt.Sprintf("New%s", builderName)).Params().Op("*").Id(builderName).Block(
		Return(Op("&").Id(builderName).Values()),
	).Line()
}

func generateWither(f *jen.File, pkgPath, structName string, field gen.StructField) {
	// Output:
	// WithName sets name.
	// func (b FooBuilder) WithName(name string) FooBuilder {
	// 	b.foo.name = name
	//  return b
	// }

	builderName := genBuilderName(structName)
	shortName := "b"
	funcName := fmt.Sprintf("With%s", gen.UpperCommonInitialism(field.Name))
	f.Comment(fmt.Sprintf("%s sets %s.", funcName, field.Name))
	f.Func().Params(
		Id(shortName).Id(builderName), // (b *FooBuilder)
	).Id(funcName). // WithName
			Params(
			// name string
			Id(gen.LowerFirst(field.Name)).Qual(gen.SkipCurrentPackagePath(pkgPath, field), field.FieldType),
		).
		Id(builderName). // Return type: FooBuilder
		Block(
			Id(shortName).Dot(gen.LowerFirst(structName)).Dot(field.Name).Op("=").Id(gen.LowerFirst(field.Name)),
			Return(Id(shortName)),
		).Line()
}

func generateWitherPointer(f *jen.File, pkgPath, structName string, field gen.StructField) {
	// Output:
	// WithName sets name.
	// func (b FooBuilder) WithName(name string, valid bool) FooBuilder {
	//  if valid {
	//    b.foo.name = name
	//  }
	//  return b
	// }

	builderName := genBuilderName(structName)
	shortName := "b"
	// Avoid conflict in naming if the variable is already named "valid".
	validVar := "valid"
	if field.Name == validVar {
		validVar += "1"
	}
	funcName := fmt.Sprintf("With%s", gen.UpperCommonInitialism(field.Name))
	f.Comment(fmt.Sprintf("%s sets %s.", funcName, field.Name))
	f.Func().Params(
		Id(shortName).Id(builderName), // (b *FooBuilder)
	).Id(funcName). // WithName
			Params(
			// name string
			Id(gen.LowerFirst(field.Name)).Qual(gen.SkipCurrentPackagePath(pkgPath, field), field.FieldType),
			Id(validVar).Bool(),
		).
		Id(builderName). // Return type: FooBuilder
		Block(
			If(Id(validVar)).Block(
				Id(shortName).Dot(gen.LowerFirst(structName)).Dot(field.Name).Op("=").Op("&").Id(gen.LowerFirst(field.Name)),
			),
			Return(Id(shortName)),
		).Line()
}

func generateBuildFunc(f *jen.File, structName string) {
	// Output:
	// Build returns Foo.
	// func (b FooBuilder) Build() Foo {
	//  return b.foo
	// }

	builderName := genBuilderName(structName)
	shortName := "b"
	f.Comment(fmt.Sprintf("Build returns %s.", structName))
	f.Func().Params(
		Id(shortName).Id(builderName), // (b *FooBuilder)
	).Id("Build").Params(). // Build()
				Id(structName). // Return type: Foo
				Block(
			Return(Id(shortName).Dot(gen.LowerFirst(structName))),
		).Line()
}
