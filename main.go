package main

import (
	"fmt"
	"regexp"

	"github.com/alextanhongpin/pkg/gen"
	"github.com/dave/jennifer/jen"
	. "github.com/dave/jennifer/jen"
)

var (
	tagRe *regexp.Regexp
)

func init() {
	tagRe = regexp.MustCompile(`build:"-"`)
}

func skipBuild(tag string) bool {
	return tagRe.MatchString(tag)
}

// Generator is the name of this tool.
const Generator = "builder"

func main() {
	if err := gen.New(generateStructFromFields); err != nil {
		panic(err)
	}
}

func generateBuilderName(structName string) string {
	builderName := fmt.Sprintf("%sBuilder", structName)
	return builderName
}

func generateStructFromFields(opt gen.Option) error {
	var (
		pkgName    = opt.PkgName
		pkgPath    = opt.PkgPath
		structName = opt.StructName
		fields     = opt.Fields
		out        = opt.Out
	)

	f := NewFile(pkgName) // e.g. main
	f.PackageComment(fmt.Sprintf("Code generated by %s, DO NOT EDIT.", Generator))

	var validFields []gen.StructField
	for _, field := range fields {
		if skipBuild(field.Tag) {
			continue
		}
		validFields = append(validFields, field)
	}

	generateBuilder(f, structName)
	generateBuilderConstructor(f, structName, validFields)

	for i, field := range validFields {
		if field.IsPointer {
			generateWitherPointer(f, pkgPath, structName, field, i)
		} else {
			generateWither(f, pkgPath, structName, field, i)
		}
	}

	generateBuildFunc(f, structName)
	generateBuildPartialFunc(f, structName)
	generateSetOrPanicFunc(f, structName)
	generateCloneFieldsFunc(f, structName)

	return f.Save(out) // e.g. main_gen.go
}

func generateBuilder(f *jen.File, structName string) {
	// Output:
	//type FooBuilder struct {
	//  foo Foo
	//  fields map[string]bool
	//}

	f.Type().Id(generateBuilderName(structName)).Struct(
		Id(gen.LowerFirst(structName)).Id(structName),
		Id("fields").Map(String()).Bool(),
	).Line()
}

func generateBuilderConstructor(f *jen.File, structName string, fields []gen.StructField) {
	// Output:
	//func NewFooBuilder() *FooBuilder {
	//  return &FooBuilder{
	//    fields: map[string]bool{"field1": false, "field2": false},
	//  }
	//}
	dict := make(Dict)
	for _, field := range fields {
		dict[Lit(field.Name)] = Lit(false)
	}

	builderName := generateBuilderName(structName)
	f.Func().Id(fmt.Sprintf("New%s", builderName)).Params().Op("*").Id(builderName).Block(
		Return(Op("&").Id(builderName).Values(Dict{
			Id("fields"): Map(String()).Bool().Values(dict),
		})),
	).Line()
}

func generateWither(f *jen.File, pkgPath, structName string, field gen.StructField, pos int) {
	// Output:
	// WithName sets name.
	// func (b FooBuilder) WithName(name string) FooBuilder {
	//   b.setOrPanic("name")
	// 	 b.foo.name = name
	//   return b
	// }

	builderName := generateBuilderName(structName)
	shortName := "b"
	funcName := fmt.Sprintf("With%s", gen.UpperCommonInitialism(field.Name))

	f.Comment(fmt.Sprintf("%s sets %s.", funcName, field.Name))
	f.Func().Params(
		Id(shortName).Id(builderName), // (b *FooBuilder)
	).Id(funcName). // WithName
			Params(Id(gen.LowerFirst(field.Name)).Add(generateType(pkgPath, field.Field, nil))). // name string
			Id(builderName).                                                                     // Return type: FooBuilder
			Block(
			Id("b").Dot("setOrPanic").Call(Lit(gen.LowerFirst(field.Name))),
			Id(shortName).Dot(gen.LowerFirst(structName)).Dot(field.Name).Op("=").Id(gen.LowerFirst(field.Name)),
			Return(Id(shortName)),
		).Line()
}

func generateWitherPointer(f *jen.File, pkgPath, structName string, field gen.StructField, pos int) {
	// Output:
	// WithName sets name.
	// func (b FooBuilder) WithName(name string, valid bool) FooBuilder {
	//   b.setOrPanic("name")
	//   if valid {
	//     b.foo.name = name
	//   }
	//   return b
	// }

	builderName := generateBuilderName(structName)
	shortName := "b"
	// Avoid conflict in naming if the variable is already named "valid".
	validVar := "valid"
	if field.Name == validVar {
		validVar += "1"
	}

	ptr := "&"
	// Disable pointer for collection pointer.
	if field.Field.IsCollection && field.Field.IsPointer {
		ptr = ""
	}

	funcName := fmt.Sprintf("With%s", gen.UpperCommonInitialism(field.Name))
	f.Comment(fmt.Sprintf("%s sets %s.", funcName, field.Name))
	f.Func().Params(
		Id(shortName).Id(builderName), // (b *FooBuilder)
	).Id(funcName). // WithName
			Params(
			// name string
			Id(gen.LowerFirst(field.Name)).Add(generateType(pkgPath, field.Field, nil)), // name string
			Id(validVar).Bool(),
		).
		Id(builderName). // Return type: FooBuilder
		Block(
			Id("b").Dot("setOrPanic").Call(Lit(gen.LowerFirst(field.Name))),
			If(Id(validVar)).Block(
				Id(shortName).Dot(gen.LowerFirst(structName)).Dot(field.Name).Op("=").Op(ptr).Id(gen.LowerFirst(field.Name)),
			),
			Return(Id(shortName)),
		).Line()
}

func generateBuildFunc(f *jen.File, structName string) {
	// Output:
	// Build returns Foo.
	// func (b FooBuilder) Build() Foo {
	//   for field, isSet := range b.fields {
	//     if !isSet {
	//       panic(fmt.Sprintf("builder.BuildErr: %q not set", field)
	//     }
	//   }
	//   return b.foo
	// }

	builderName := generateBuilderName(structName)
	shortName := "b"
	f.Comment(fmt.Sprintf("Build returns %s.", structName))
	f.Func().Params(
		Id(shortName).Id(builderName), // (b *FooBuilder)
	).Id("Build").Params(). // Build()
				Id(structName). // Return type: Foo
				Block(
			For(
				List(Id("field"), Id("isSet")).Op(":=").Range().Id("b").Dot("fields"),
			).Block(
				If(Op("!").Id("isSet")).Block(
					Panic(Qual("fmt", "Sprintf").Call(Lit("builder.BuildErr: %q not set"), Id("field"))),
				),
			),
			Return(Id(shortName).Dot(gen.LowerFirst(structName))),
		).Line()
}

func generateBuildPartialFunc(f *jen.File, structName string) {
	// Output:
	// Build returns Foo.
	// func (b FooBuilder) BuildPartial() Foo {
	//   return b.foo
	// }

	builderName := generateBuilderName(structName)
	shortName := "b"
	f.Comment(fmt.Sprintf("Build returns %s.", structName))
	f.Func().Params(
		Id(shortName).Id(builderName), // (b FooBuilder)
	).Id("BuildPartial").Params(). // Build()
					Id(structName). // Return type: Foo
					Block(
			Return(Id(shortName).Dot(gen.LowerFirst(structName))),
		).Line()
}

func generateSetOrPanicFunc(f *jen.File, structName string) {
	// Output:
	// Build returns Foo.
	// func (b *FooBuilder) setOrPanic(field string) {
	//   c := b.cloneFields()
	//   if c[field] {
	//     panic(fmt.Sprintf("builder.BuildErr: setting %q twice", field))
	//   }
	//   c[field] = true
	//   b.fields = c
	// }

	builderName := generateBuilderName(structName)
	shortName := "b"
	f.Comment("setOrPanic sets the fields only if it has not yet been set. It will panic when calling it twice.")
	f.Func().Params(
		Id(shortName).Op("*").Id(builderName), // (b FooBuilder)
	).Id("setOrPanic").Params(Id("field").String()). // setOrPanic(field string)
								Block(
			Id("c").Op(":=").Id("b").Dot("cloneFields").Call(),
			If(Id("c").Index(Id("field"))).Block(
				Panic(Qual("fmt", "Sprintf").Call(Lit("builder.BuildErr: cannot set %q twice"), Id("field"))),
			),
			Id("c").Index(Id("field")).Op("=").Lit(true),
			Id("b").Dot("fields").Op("=").Id("c"),
		).Line()
}

func generateCloneFieldsFunc(f *jen.File, structName string) {
	// Output:
	// Build returns Foo.
	// func (b FooBuilder) cloneFields() map[string]bool {
	//   result := make(map[string]bool)
	//   for k, v := range b.fields {
	//     result[k] = v
	//   }
	//   return result
	// }

	builderName := generateBuilderName(structName)
	shortName := "b"
	f.Comment("cloneFields clone the fields to avoid mutation")
	f.Func().Params(
		Id(shortName).Id(builderName), // (b FooBuilder)
	).Id("cloneFields").Params(). // cloneFields()
					Map(String()).Bool(). // map[string]bool
					Block(
			Id("result").Op(":=").Make(Map(String()).Bool()),
			For(
				List(Id("k"), Id("v")).Op(":=").Range().Id("b").Dot("fields"),
			).Block(
				Id("result").Index(Id("k")).Op("=").Id("v"),
			),
			Return(Id("result")),
		).Line()
}

// Generate the field and type for primitive, map or collection.
func generateType(pkgPath string, field *gen.Field, parent *gen.Field) Code {
	param := Id("")
	if field.IsMap {
		key, value := field.MapKey, field.MapValue
		param = param.Map(generateType(pkgPath, key, field))
		param = param.Add(generateType(pkgPath, value, field))
		return param
	}
	if field.IsCollection {
		param = param.Index()
	}
	// At the moment, allow setter for []*Type
	isCollectionPointer := field.IsPointer && field.IsCollection
	belongsToPointerMapOrCollection := parent != nil && (parent.IsCollection || parent.IsMap) && field.IsPointer
	if belongsToPointerMapOrCollection || isCollectionPointer {
		param = param.Add(Op("*"))
	}
	param = param.Qual(gen.SkipCurrentPackagePath(pkgPath, field.PkgPath), field.Type)
	return param
}
