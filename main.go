package main

import (
	"fmt"
	"regexp"

	"github.com/alextanhongpin/pkg/gen"
	"github.com/dave/jennifer/jen"
	. "github.com/dave/jennifer/jen"
)

var (
	tagRe *regexp.Regexp
)

func init() {
	tagRe = regexp.MustCompile(`build:"-"`)
}

func skipBuild(tag string) bool {
	return tagRe.MatchString(tag)
}

// Generator is the name of this tool.
const Generator = "builder"

func main() {
	if err := gen.New(generateStructFromFields); err != nil {
		panic(err)
	}
}

func generateBuilderName(structName string) string {
	builderName := fmt.Sprintf("%sBuilder", structName)
	return builderName
}

func generateStructFromFields(opt gen.Option) error {
	var (
		pkgName    = opt.PkgName
		pkgPath    = opt.PkgPath
		structName = opt.StructName
		fields     = opt.Fields
		out        = opt.Out
	)

	f := NewFile(pkgName) // e.g. main
	f.PackageComment(fmt.Sprintf("Code generated by %s, DO NOT EDIT.", Generator))

	var validFields []gen.StructField
	for _, field := range fields {
		if skipBuild(field.Tag) {
			continue
		}
		validFields = append(validFields, field)
	}

	generateBuilder(f, structName)
	generateBuilderConstructor(f, structName, validFields)

	for i, field := range validFields {
		if field.IsPointer {
			generateWitherPointer(f, pkgPath, structName, field, i)
		} else {
			generateWither(f, pkgPath, structName, field, i)
		}
	}

	generateBuildFunc(f, structName)
	generateBuildPartialFunc(f, structName)

	return f.Save(out) // e.g. main_gen.go
}

func generateBuilder(f *jen.File, structName string) {
	// Output:
	//type FooBuilder struct {
	//  foo Foo
	//  fields []string
	//  fieldsSet uint64
	//}

	f.Type().Id(generateBuilderName(structName)).Struct(
		Id(gen.LowerFirst(structName)).Id(structName),
		Id("fields").Index().String(),
		Id("fieldsSet").Uint64(),
	).Line()
}

func generateBuilderConstructor(f *jen.File, structName string, fields []gen.StructField) {
	// Output:
	//func NewFooBuilder() *FooBuilder {
	//  return &FooBuilder{
	//    fields: []string{"field1", "field2", "field3"},
	//  }
	//}
	fieldValues := make([]Code, len(fields))
	for i, field := range fields {
		fieldValues[i] = Lit(field.Name)
	}

	builderName := generateBuilderName(structName)
	f.Func().Id(fmt.Sprintf("New%s", builderName)).Params().Op("*").Id(builderName).Block(
		Return(Op("&").Id(builderName).Values(
			Dict{
				Id("fields"): Index().String().Values(fieldValues...),
			},
		)),
	).Line()
}

func generateWither(f *jen.File, pkgPath, structName string, field gen.StructField, pos int) {
	// Output:
	// WithName sets name.
	// func (b FooBuilder) WithName(name string) FooBuilder {
	//   b.fieldsSet |= 1 << n
	// 	 b.foo.name = name
	//   return b
	// }

	builderName := generateBuilderName(structName)
	shortName := "b"
	funcName := fmt.Sprintf("With%s", gen.UpperCommonInitialism(field.Name))

	f.Comment(fmt.Sprintf("%s sets %s.", funcName, field.Name))
	f.Func().Params(
		Id(shortName).Id(builderName), // (b *FooBuilder)
	).Id(funcName). // WithName
			Params(generateType(pkgPath, field)). // name string
			Id(builderName).                      // Return type: FooBuilder
			Block(
			Id("b").Dot("fieldsSet").Op("|=").Lit(1).Op("<<").Lit(pos),
			Id(shortName).Dot(gen.LowerFirst(structName)).Dot(field.Name).Op("=").Id(gen.LowerFirst(field.Name)),
			Return(Id(shortName)),
		).Line()
}

func generateWitherPointer(f *jen.File, pkgPath, structName string, field gen.StructField, pos int) {
	// Output:
	// WithName sets name.
	// func (b FooBuilder) WithName(name string, valid bool) FooBuilder {
	//   b.fieldsSet |= 1 << n
	//   if valid {
	//     b.foo.name = name
	//   }
	//   return b
	// }

	builderName := generateBuilderName(structName)
	shortName := "b"
	// Avoid conflict in naming if the variable is already named "valid".
	validVar := "valid"
	if field.Name == validVar {
		validVar += "1"
	}

	funcName := fmt.Sprintf("With%s", gen.UpperCommonInitialism(field.Name))
	f.Comment(fmt.Sprintf("%s sets %s.", funcName, field.Name))
	f.Func().Params(
		Id(shortName).Id(builderName), // (b *FooBuilder)
	).Id(funcName). // WithName
			Params(
			// name string
			generateType(pkgPath, field),
			Id(validVar).Bool(),
		).
		Id(builderName). // Return type: FooBuilder
		Block(
			Id("b").Dot("fieldsSet").Op("|=").Lit(1).Op("<<").Lit(pos),
			If(Id(validVar)).Block(
				Id(shortName).Dot(gen.LowerFirst(structName)).Dot(field.Name).Op("=").Op("&").Id(gen.LowerFirst(field.Name)),
			),
			Return(Id(shortName)),
		).Line()
}

func generateBuildFunc(f *jen.File, structName string) {
	// Output:
	// Build returns Foo.
	// func (b FooBuilder) Build() Foo {
	//   for i := 0; i < len(b.fields); i++ {
	//     if (b.fieldsSet & 1 << i) != (1 << i) {
	//       panic(fmt.Sprintf("builder.BuildErr: %q not set", b.fields[i]))
	//     }
	//   }
	//   return b.foo
	// }

	builderName := generateBuilderName(structName)
	shortName := "b"
	f.Comment(fmt.Sprintf("Build returns %s.", structName))
	f.Func().Params(
		Id(shortName).Id(builderName), // (b *FooBuilder)
	).Id("Build").Params(). // Build()
				Id(structName). // Return type: Foo
				Block(
			For(
				Id("i").Op(":=").Lit(0),
				Id("i").Op("<").Len(Id("b").Dot("fields")),
				Id("i").Op("++"),
			).Block(
				If(Parens(Id("b").Dot("fieldsSet").Op("&").Lit(1).Op("<<").Id("i"))).Op("!=").Lit(1).Op("<<").Id("i").Block(
					Panic(Qual("fmt", "Sprintf").Call(Lit("builder.BuildErr: %q not set"), Id("b").Dot("fields").Index(Id("i")))),
				),
			),
			Return(Id(shortName).Dot(gen.LowerFirst(structName))),
		).Line()
}

func generateBuildPartialFunc(f *jen.File, structName string) {
	// Output:
	// Build returns Foo.
	// func (b FooBuilder) BuildPartial() Foo {
	//   return b.foo
	// }

	builderName := generateBuilderName(structName)
	shortName := "b"
	f.Comment(fmt.Sprintf("Build returns %s.", structName))
	f.Func().Params(
		Id(shortName).Id(builderName), // (b *FooBuilder)
	).Id("BuildPartial").Params(). // Build()
					Id(structName). // Return type: Foo
					Block(
			Return(Id(shortName).Dot(gen.LowerFirst(structName))),
		).Line()
}

// Generate the field and type for primitive, map or collection.
func generateType(pkgPath string, field gen.StructField) Code {
	param := Id(gen.LowerFirst(field.Name))
	if field.IsMap {
		param = param.Map(Qual(gen.SkipCurrentPackagePath(pkgPath, field.MapKeyPkgPath), field.MapKeyType))
	}
	if field.IsCollection {
		param = param.Index()
	}
	param = param.Qual(gen.SkipCurrentPackagePath(pkgPath, field.FieldPkgPath), field.FieldType)
	return param
}
